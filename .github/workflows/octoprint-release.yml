name: Image Deploy

on:
  repository_dispatch:
    types: [deploy, released, prereleased]
  push:
    branches:
      - master
      
jobs:
  # this job should build and publish the main octoprint image for the given tag, but
  # should not publish the 'latest' tag unless the given tag from payload is 
  # equal to the latest (stable) release tag of octoprint
  release_main_on_dispatch:
    if: github.event_name == 'repository_dispatch' && github.repository_owner == 'OctoPrint'
    needs: filters

    runs-on: ubuntu-latest
    
    steps:
      - 
        uses: actions/checkout@v2
      - 
        name: Get latest Octoprint
        id: latest-octoprint
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: OctoPrint
          repo: OctoPrint
          excludes: draft
      -
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm,arm64

      -
        name: Tagging Strategy
        id: tagging
        uses: HackerHappyHour/tagging-strategy@2.0.0-rc2
        with:
          image_name: octprint/octoprint
          # allows the publishing of pre-release images by turning 'latest' to false if the 
          latest: ${{ github.event.action == 'released' }}
          tag_name: ${{ github.event.client_payload.tag_name }}
          tags: |
            %X%
            %X.Y%
            %X.Y.Z%

      - 
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Deploy
        uses: docker/build-push-action@v2
        with:
          push: true
          cache-from: type=registry,ref=octoprint/octoprint:cache
          cache-to: type=inline
          tags: ${{ steps.tagging.outputs.tags }}
          platforms: |
            linux/amd64
            linux/arm/v7
            linux/arm64
          build-args: |
            octoprint_ref=${{ github.event.client_payload.tag_name }}



  # This job should build and publish the main octoprint image from the latest,
  # stable release of octoprint, and *should* overwrite the 'latest' tag
  # ensures this will not run on the dispatch event, or when non-relevant files
  # are changed (such as documentation or build/workflow scripts)
  release_main_on_push:
    if: needs.filters.outputs.main == 'true' && github.event_name == 'push' && github.repository_owner == 'OctoPrint'
    needs: filters

    runs-on: ubuntu-latest

    steps:
      - 
        uses: actions/checkout@v2
      # outputs: (loaded from file specified in filters)
      - uses: dorny/paths-filter@v2.5.0
        id: filter
        with:
          filters: '.github/filters.yml'
        # outputs: release
      - name: Get latest Octoprint
        id: latest-octoprint
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: OctoPrint
          repo: OctoPrint
          excludes: prerelease,draft
      -
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm,arm64

      -
        name: Tagging Strategy
        id: tagging
        uses: HackerHappyHour/tagging-strategy@2.0.0-rc2
        with:
          image_name: octprint/octoprint
          latest: true
          tag_name: ${{ needs.filters.outputs.stable_octoprint }}
          tags: |
            %X%
            %X.Y%
            %X.Y.Z%

      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - 
        name: Build and Deploy
        id: build_deploy
        uses: docker/build-push-action@v2
        with:
          push: true
          cache-from: type=registry,ref=octoprint/octoprint:cache
          cache-to: type=inline
          tags: ${{ steps.tagging.outputs.tags }}
          platforms: |
            linux/amd64
            linux/arm/v7
            linux/arm64
          build-args: |
            octoprint_ref=${{ needs.filters.outputs.stable_octoprint }}
