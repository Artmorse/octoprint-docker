name: Image Deploy

on:
  repository_dispatch:
    types: [deploy, released, prereleased]
  push:
    branches:
      - master
      
# This job creates filters and configurations that are used by the release jobs
# any shared configuration/conditionals should be set as outputs for this job
# or be present in the output of one of this jobs steps
jobs:
  filters:
    runs-on: ubuntu-latest
    outputs:
      main: ${{ steps.filter.outputs.main }}
      minimal: ${{ steps.filter.outputs.minimal }}
      stable_octoprint: ${{ steps.latest-octprint.outputs.release }}

    steps:
    - uses: actions/checkout@v2

    # outputs: release
    - name: Get latest Octoprint
      id: latest-octoprint
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        owner: OctoPrint
        repo: OctoPrint

    # outputs: (loaded from file specified in filters)
    - uses: dorny/paths-filter@v2.5.0
      id: filter
      with:
        filters: '.github/filters.yml'


  # this job should build and publish the main octoprint image for the given tag, but
  # should not publish the 'latest' tag unless the given tag from payload is 
  # equal to the latest (stable) release tag of octoprint
  release_main_on_dispatch:
    if: github.event_name != 'push' && github.repository_owner == 'OctoPrint'
    needs: filters

    runs-on: ubuntu-latest
    
    steps:
      - 
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          platforms: arm,arm64

      -
        name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: octprint/octoprint
          tag-semver: |
            {{major}}
            {{major}}.{{minor}}
            {{major}}.{{minor}}.{{patch}}

      - 
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Deploy
        uses: docker/build-push-action@v2
        # make sure not to publish 'latest' if tag is a pre-release or not the latest stable octoprint release
        if: steps.tagging.outputs.tag == 'latest' && needs.filters.outputs.stable_octoprint != github.event.client_payload.tag_name
        with:
          push: true
          cache-from: octoprint/octoprint:cache
          cache-to: octoprint/octoprint:cache
          tags: |
            ${{}}
          platforms: |
            linux/amd64
            linux/arm/v7
            linux/arm64
          build-args: |
            octoprint_ref=${{  }}
        run: |
          docker buildx build --push \
            --platform linux/arm64,linux/amd64,linux/arm/v7 \
            --cache-from octoprint/octoprint:cache \
            --cache-to octoprint/octoprint:cache \
            --build-arg tag=${{ env.tag_name }} \
            --progress plain -t octoprint/octoprint:${{ steps.tagging.outputs.tag }} -f Dockerfile .



  # This job should build and publish the main octoprint image from the latest,
  # stable release of octoprint, and *should* overwrite the 'latest' tag
  # ensures this will not run on the dispatch event, or when non-relevant files
  # are changed (such as documentation or build/workflow scripts)
  release_main_on_push:
    if: needs.filters.outputs.main == 'true' && github.event_name == 'push' && needs.filters.outputs.repo_org == 'OctoPrint'
    needs: filters

    runs-on: ubuntu-latest
    strategy:
      matrix:
        tags: ['latest','%X%', '%X.Y%', '%X.Y.Z%']

    steps:
      - uses: actions/checkout@v2
      - name: Set Tag
        run: echo "::set-output name=tag_name::${{ needs.filters.outputs.stable_octoprint }}"
      - name: Tagging strategy
        id: tagging
        uses: HackerHappyHour/tagging-strategy@1.0.0
        with:
          tag_name: ${{ env.tag_name }}
          pattern: ${{ matrix.tags}}

      - name: Set up Docker Buildx
        id: setup
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest
      
      - name: Docker Login
        id: login
        run: |
          echo ${{ secrets.DOCKER_PASSWORD}} | docker login -u ${{ secrets.DOCKER_USERNAME}} --password-stdin

      - name: Build and Deploy
        id: build_deploy
        #if matrix tag is latest AND tag_name is NOT equal to latest-octoprint don't build
        # this allows rebuilds of older versions without changing 'latest' to an old release
        if: ${{!(env.tag_name == 'latest' && ( steps.latest-octprint.outputs.release != env.tag_name ))}}
        run: |
          docker buildx build --push \
            --platform linux/arm64,linux/amd64,linux/arm/v7 \
            --cache-from octoprint/octoprint:cache \
            --cache-to octoprint/octoprint:cache \
            --build-arg tag=${{ env.tag_name }} \
            --progress plain -t octoprint/octoprint:${{ steps.tagging.outputs.tag }} -f Dockerfile .

